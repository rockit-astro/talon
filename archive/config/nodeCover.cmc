///////////////////////////
//
// Cover control cmc script
//
// 1.0 11/11/05 IRC -- written
//
///////////////////////////
///////////////////////////
//
//  Make ligther the code
//  2.0 17/12/2007
//
//
///////////////////////////
//////////////////////////

// ======================================
// Configuration section:
//
// Note: Modify return values below to match installation bit switch settings
//
// Note bit value with notation (1<<n) where n is bit number 0 - 7
// Combine bits with | operator ex:  ((1<<3) | (1<<4)) sets both bits 3 and 4
//
// (Connector pin # reference)
// bit  JP21(in)   JP22(out)
// ---  --------   ---------
//  0      1       1(hi) 2(lo)
//  1      3       3(hi) 4(lo)
//  2      5       5(hi) 6(lo)
//  3      7       7(hi) 8(lo)
//  4      9       9(hi) 10(lo)
//  5      11      11(hi) 12(lo)
//  6      13	   13(hi) 14(lo)
//  7      15      15(hi) 16(lo)

//---------------------------------------
// Output line switches
// Connector JP22.  "1" initiates action.
//----------------------------------------
// Input state switches
// Connector JP21.  "1" indicates 'true' status

define stopMotors()
{
	olevel = olevel & 0x0F;
}

// Return 1 if right cover is closed, 0 else
define cClosed() {
	if ((ilevel & 0x80) == 0x80)
		return 1;
	return 0;
}

// Return 1 if left cover is open, 0 else
define cOpened() {
	if((ilevel & 0x10) == 0x10)
		return 1;
	return 0;
}

///////////////////////////////////////////////////////////////
// Espera que el moviment de les tapes s'acabi. 
// Envia un missatge d'espera cada 1/2s 
// Retorna una error si el moviment no s'acaba depres de 10s.
///////////////////////////////////////////////////////////////
//    /!\ Polling = active wait. To be changed ASAP.         //
//////////////////////////////////////////////////////////////
define cMoveComplete() {
	c = 0;

	while(c < 120) {
		c = c + 1;
		//Waits for 0.5 sec
		pause(500);
		if(cOpened()) {
			stopMotors();
			printf("1: Covers are open\n");
			return 1;
		}
		if(cClosed()) {
			stopMotors();
			printf("1: Covers are closed\n");
			return 1;
		}
		//Envia un missatge d'espera (una successio de puntets)
		//printf(".\n");
	}
	//Timeout, return an error
	stopMotors();
	printf("-1: Covers did not move correctly\n");
	return 0;
}


define cOpenInit() {
	stopMotors();
	
	//openRightCover();
	olevel = olevel | 0x20;

	//Espera que la primera tapa s'hagi obert per obrir l'altre
	c = 0;
	//Time out 1 minut = 60 segons = 60000ms = 300 * 200ms
	
	        //!rgOpened()
	while((!(ilevel & 0x20)) && (c < 300)) {
		pause(200);
		c = c + 1;
	}
	stopMotors();
	     //!rgOpened()
	if(!(ilevel & 0x20)) {
		printf("-1: Time out while opening right cover\n");
		return 0;
	}
	//openLeftCover();
	olevel = olevel | 0x10;

	return 1;
}


define cCloseInit() {
	stopMotors();

	//closeLeftCover();
	olevel = olevel | 0x40;

	//Espera que la primera tapa hagi tancat per tancar l'altre.
	c = 0;
	//Time out 1 minut = 60 segons = 60000ms = 300 * 200ms

	//!lfClosed()
	while((!(ilevel & 0x40)) && (c < 300)){
		pause(200);
		c = c + 1;
	}
	stopMotors();

	//!lfClosed()
	if(!(ilevel & 0x40)) {
		printf("-1: Time out while closing left cover\n");
		return 0;
	}
	
	//closeRightCover();
	olevel = olevel | 0x80;
	return 1;
}

// Nomes aquestes dues funcions s'utilitzen 
define coverOpen() {
	stopMotors();
	if(!cOpenInit()) {
		printf("-1: Cannot start cover open... aborting\n");
		stopMotors();
		return 0;
	}
	if(!cMoveComplete()) {
		printf("-1: Cannot stop cover open... aborting\n");
		stopMotors();
		return 0;
	}
	stopMotors();
	return 1;
}

define coverClose() {
	stopMotors();
	if(!cCloseInit()) {
		printf("-1: Cannot start cover close... aborting\n");
		stopMotors();
		return 0;
	}
	if(!cMoveComplete()) 
	{
		printf("-1: Cannot stop cover close... aborting\n");
		stopMotors();
		return 0;
	}
	stopMotors();
	return 1;
}

