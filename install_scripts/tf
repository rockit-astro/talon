#!/usr/bin/php -q
<?php
// FUNCTIONS COPIED FROM SALTOS
function capture_next_error() {
	global $_ERROR_HANDLER;
	if(!isset($_ERROR_HANDLER["level"])) show_php_error(array("phperror"=>"error_handler without levels availables"));
	$_ERROR_HANDLER["level"]++;
	array_push($_ERROR_HANDLER["msg"],"");
}

function get_clear_error() {
	global $_ERROR_HANDLER;
	if($_ERROR_HANDLER["level"]<=0) show_php_error(array("phperror"=>"error_handler without levels availables"));
	$_ERROR_HANDLER["level"]--;
	return array_pop($_ERROR_HANDLER["msg"]);
}

function do_message_error($array,$format) {
	static $dict=array(
		"html"=>array(array("<h1>","</h1>"),array("<p>","</p>"),"<br/>"),
		"text"=>array(array("***** "," *****\n"),array("","\n"),"\n")
	);
	if(!isset($dict[$format])) die("Unknown format $format");
	$msg=array();
	if(isset($array["phperror"])) $msg[]=array("PHP Error",$array["phperror"]);
	if(isset($array["xmlerror"])) $msg[]=array("XML Error",$array["xmlerror"]);
	if(isset($array["dberror"])) $msg[]=array("DB Error",$array["dberror"]);
	if(isset($array["emailerror"])) $msg[]=array("EMAIL Error",$array["emailerror"]);
	if(isset($array["fileerror"])) $msg[]=array("FILE Error",$array["fileerror"]);
	if(isset($array["source"])) $msg[]=array("XML Source",$array["source"]);
	if(isset($array["exception"])) $msg[]=array("Exception",$array["exception"]);
	if(isset($array["details"])) $msg[]=array("Details",$array["details"]);
	if(isset($array["query"])) $msg[]=array("Query",$array["query"]);
	if(isset($array["backtrace"])) {
		$backtrace=$array["backtrace"];
		array_walk($backtrace,"__debug_backtrace_helper");
		$msg[]=array("Backtrace",implode($dict[$format][2],$backtrace));
	}
	array_walk($msg,"__do_message_error_helper",$dict[$format]);
	$msg=implode($msg);
	return $msg;
}

function __debug_backtrace_helper(&$item,$key) {
	$item="${key} => ".$item["function"].(isset($item["class"])?" (in class ".$item["class"].")":"").((isset($item["file"]) && isset($item["line"]))?" (in file ".$item["file"]." at line ".$item["line"].")":"");
}

function __do_message_error_helper(&$item,$key,$dict) {
	$item=$dict[0][0].$item[0].$dict[0][1].$dict[1][0].$item[1].$dict[1][1];
}

function show_php_error($array=null) {
	global $_ERROR_HANDLER;
	static $backup=null;
	if(is_null($array)) $array=$backup;
	if(is_null($array)) return;
	// REFUSE THE DEPRECATED WARNINGS
	if(isset($array["phperror"])) {
		$pos1=stripos($array["phperror"],"function");
		$pos2=stripos($array["phperror"],"deprecated");
		if($pos1!==false && $pos2!==false) return;
	}
	// ADD BACKTRACE IF NOT FOUND
	if(!isset($array["backtrace"])) $array["backtrace"]=debug_backtrace();
	// CREATE THE MESSAGE ERROR USING PLAIN TEXT
	$msg=do_message_error($array,"text");
	// CHECK IF CAPTURE ERROR WAS ACTIVE
	if($_ERROR_HANDLER["level"]>0) {
		$old=array_pop($_ERROR_HANDLER["msg"]);
		array_push($_ERROR_HANDLER["msg"],$old.$msg);
		$backup=$array;
		return;
	}
	// ADD THE MESSAGE TO THE ERROR LOG FILE
	//~ addlog($msg,__ERROR_LOG__);
	// DUMP TO STDOUT
	while(ob_get_level()) ob_end_clean(); // TRICK TO CLEAR SCREEN
	echo $msg;
	die();
}

function __error_handler($type,$message,$file,$line) {
	$backtrace=debug_backtrace();
	array_shift($backtrace);
	show_php_error(array("phperror"=>"${message} (code ${type})","details"=>"Error on file '${file}' at line ${line}","backtrace"=>$backtrace));
}

function __exception_handler($e) {
	$backtrace=$e->getTrace();
	show_php_error(array("exception"=>$e->getMessage()." (code ".$e->getCode().")","details"=>"Error on file '".$e->getFile()."' at line ".$e->getLine(),"backtrace"=>$backtrace));
}

function __shutdown_handler() {
	semaphore_shutdown();
	$error=error_get_last();
	$types=array(E_ERROR,E_PARSE,E_CORE_ERROR,E_COMPILE_ERROR,E_USER_ERROR,E_RECOVERABLE_ERROR);
	if(is_array($error) && isset($error["type"]) && in_array($error["type"],$types)) {
		global $_ERROR_HANDLER;
		$_ERROR_HANDLER=array("level"=>0,"msg"=>array());
		$backtrace=debug_backtrace();
		show_php_error(array("phperror"=>"${error["message"]}","details"=>"Error on file '${error["file"]}' at line ${error["line"]}","backtrace"=>$backtrace));
	}
}

function program_error_handler() {
	global $_ERROR_HANDLER;
	$_ERROR_HANDLER=array("level"=>0,"msg"=>array());
	error_reporting(0);
	set_error_handler("__error_handler");
	set_exception_handler("__exception_handler");
	register_shutdown_function('__shutdown_handler');
}

function init_random() {
	static $init=false;
	if($init) return;
	srand((float)microtime(true)*1000000);
	$init=true;
}

function current_datetime($offset=0) {
	return current_date($offset)." ".current_time($offset);
}

function current_date($offset=0) {
	return date("Y-m-d",time()+$offset);
}

function current_time($offset=0) {
	return date("H:i:s",time()+$offset);
}

function current_datetime_decimals($offset=0) {
	return current_datetime($offset).".".current_decimals($offset);
}

function current_decimals($offset=0) {
	$decimals=explode(".",microtime(true)+$offset);
	return substr((isset($decimals[1])?$decimals[1]:"")."0000",0,4);
}

function semaphore_acquire($file) {
	return __semaphore_helper(__FUNCTION__,$file);
}

function semaphore_release($file) {
	return __semaphore_helper(__FUNCTION__,$file);
}

function semaphore_shutdown() {
	return __semaphore_helper(__FUNCTION__,null);
}

function __semaphore_helper($fn,$file) {
	static $stack=array();
	if(stripos($fn,"acquire")!==false) {
		$hash=md5($file);
		if(!isset($stack[$hash])) $stack[$hash]=null;
		if($stack[$hash]) return false;
		init_random();
		while(1) {
			capture_next_error();
			$stack[$hash]=fopen($file,"a");
			get_clear_error();
			if($stack[$hash]) break;
			usleep_protected(rand(0,1000));
		}
		chmod_protected($file,0666);
		touch_protected($file);
		while(1) {
			capture_next_error();
			$result=flock($stack[$hash],LOCK_EX|LOCK_NB);
			get_clear_error();
			if($result) break;
			usleep_protected(rand(0,1000));
		}
		ftruncate($stack[$hash],0);
		fwrite($stack[$hash],getmypid());
		return true;
	} elseif(stripos($fn,"release")!==false) {
		$hash=md5($file);
		if(!isset($stack[$hash])) $stack[$hash]=null;
		if(!$stack[$hash]) return false;
		capture_next_error();
		flock($stack[$hash],LOCK_UN);
		get_clear_error();
		capture_next_error();
		fclose($stack[$hash]);
		get_clear_error();
		$stack[$hash]=null;
		return true;
	} elseif(stripos($fn,"shutdown")!==false) {
		foreach($stack as $hash=>$val) {
			if($stack[$hash]) {
				capture_next_error();
				flock($stack[$hash],LOCK_UN);
				get_clear_error();
				capture_next_error();
				fclose($stack[$hash]);
				get_clear_error();
				$stack[$hash]=null;
			}
		}
		return true;
	}
	return false;
}

function usleep_protected($usec) {
	$socket=socket_create(AF_UNIX,SOCK_STREAM,0);
	$read=null;
	$write=null;
	$except=array($socket);
	capture_next_error();
	$time1=microtime(true);
	socket_select($read,$write,$except,intval($usec/1000000),intval($usec%1000000));
	$time2=microtime(true);
	get_clear_error();
	return ($time2-$time1)*1000000;
}

function chmod_protected($file,$mode) {
	capture_next_error();
	ob_start();
	chmod($file,$mode);
	$error1=ob_get_clean();
	$error2=get_clear_error();
	return $error1.$error2;
}

function touch_protected($file) {
	capture_next_error();
	ob_start();
	touch($file);
	$error1=ob_get_clean();
	$error2=get_clear_error();
	return $error1.$error2;
}

// LOAD ALL ALIAS
$alias=array();
$file2="/usr/local/telescope/talon_alias";
if(file_exists($file2)) $alias=array_merge($alias,file($file2));
foreach($alias as $key=>$val) {
	unset($alias[$key]);
	if(substr($val,0,1)=="#") $val="";
	if(strpos($val,"=")===false) $val="";
	if($val!="") $alias[strtok($val,"=")]=trim(strtok(""));
}

// CHECK FIRST ARGUMENT
if(isset($argv[1]) && isset($alias[$argv[1]])) {
	$temp=explode("\"",$argv[0]." ".$alias[$argv[1]]);
	$param=array_splice($argv,2);
	foreach($param as $key=>$val) {
		unset($param[$key]);
		$param["\$".($key+1)]=$val;
	}
	$param=array_reverse($param,true);
	$argv=array();
	foreach($temp as $key=>$val) {
		if($key%2==0) {
			$temp2=explode(" ",$val);
			foreach($temp2 as $val) {
				if($val!="") $argv[]=str_replace(array_keys($param),array_values($param),$val);
			}
		} else {
			if($val!="") $argv[]=str_replace(array_keys($param),array_values($param),$val);
		}
	}
	$argc=count($argv);
}

// ACQUIRE SEMAPHORE
program_error_handler();
$temp=array();
if(isset($argv[1])) $temp[]=$argv[1];
if(isset($argv[3])) $temp[]=$argv[3];
if(count($temp)>0) $semaphore_file="/tmp/".md5(serialize($temp)).".sem";
if(isset($semaphore_file)) semaphore_acquire($semaphore_file);

// FLUSH ACTION
if($argc>=4) {
	if(!file_exists($argv[3])) die("Fifo to read not found\n");
	capture_next_error();
	$fp=fopen($argv[3],"r+");
	get_clear_error();
	if($fp===false) die("Could not open the fifo to read\n");
	stream_set_blocking($fp,false);
	$buffer="";
	while($char=fread($fp,1024)) $buffer.=$char;
	fclose($fp);
}

// WRITE ACTION
if($argc>=3) {
	if(!file_exists($argv[1])) die("Fifo to write not found\n");
	capture_next_error();
	$fp=fopen($argv[1],"r+");
	get_clear_error();
	if($fp===false) die("Could not open the fifo to write\n");
	stream_set_blocking($fp,false);
	$argv[2]=trim($argv[2]);
	$argv[2]=str_replace("\\n","\n",$argv[2]);
	$argv[2]=explode("\n",$argv[2]);
	foreach($argv[2] as $temp) {
		$temp2=strtok($temp," ");
		switch($temp2) {
			case "sleep":
				sleep(strtok(""));
				break;
			default:
				fwrite($fp,$temp."\n");
				break;
		}
	}
	fclose($fp);
}

// READ ACTION
if($argc>=4) {
	if(!file_exists($argv[3])) die("Fifo to read not found\n");
	capture_next_error();
	$fp=fopen($argv[3],"r+");
	get_clear_error();
	if($fp===false) die("Could not open the fifo to read\n");
	stream_set_blocking($fp,false);
	$index=4;
	if($index<$argc && is_numeric($argv[$index])) {
		$timeout=microtime(true)+$argv[$index];
		$timeout2=$argv[$index];
		$index++;
	}
	$found=0;
	while(!$found) {
		$buffer="";
		while($char=fread($fp,1024)) $buffer.=$char;
		$buffer=trim($buffer);
		if($buffer!="") echo "$buffer\n";
		if($index<$argc) {
			for($i=$index;$i<$argc;$i++) {
				if(stripos($buffer,$argv[$i])!==false) {
					$found=1;
					break;
				}
			}
		} else {
			if($buffer!="") $found=1;
		}
		if(!$found) {
			usleep_protected(1000);
			if(isset($timeout)) {
				if(microtime(true)>=$timeout) {
					echo "Timeout '$timeout2' reached\n";
					break;
				}
			}
		}
	}
	fclose($fp);
}

// RELEASE SEMAPHORE
if(isset($semaphore_file)) semaphore_release($semaphore_file);

// HELP
if($argc<3) {
	echo "Usage: ".basename($argv[0])."\n";
	echo "\talias [arguments]\n";
	echo "\tfifo_to_write command_to_write\n";
	echo "\t[fifo_to_read] [timeout_in_seconds] [command_to_read] [command_to_read] ...\n";
	echo "\n";
	echo "Available alias:\n";
	foreach($alias as $key2=>$val2) {
		echo "\t$key2\n";
		$temp=explode("\"",$val2);
		$pos=1;
		foreach($temp as $key=>$val) {
			if($key%2==0) {
				$temp2=explode(" ",$val);
				foreach($temp2 as $val) {
					if($val!="") {
						echo "\t\t[$pos] $val\n";
						$pos++;
					}
				}
			} else {
				if($val!="") {
					echo "\t\t[$pos] $val\n";
					$pos++;
				}
			}
		}
	}
	echo "\n";
	die();
}
?>