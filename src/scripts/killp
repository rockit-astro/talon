#!/bin/csh -f
# send a signal to all instances of the given process(es) by name
# exit 0 if all ok, 1 if usage error, 2 if any signalling failed.

if ($#argv < 1) then
  usage:
    echo 'Usage: [options] [-sig] process ...'
    echo 'Purpose: to send a signal to one or more processes by name'
    echo 'Exit: 0 if all ok, 1 if usage error, 2 if any signalling failed.'
    echo 'Options:'
    echo "  -n:   do not actually send signal"
    echo "  -q:   quiet, even when fail"
    echo "  -v:   verbose, even when successful"
    echo "-sig:   signal number or one of following names (default is -TERM):"
    kill -l | tr -d '\n'	# when run from script kill adds newlines!
    echo ""
    exit 1
endif

# check args
set sig = "-TERM"
while ("$argv[1]" =~ -*)
    switch ("$argv[1]")
    case -n:
	set nflag
	breaksw
    case -q:
	set qflag
	breaksw
    case -v:
	set vflag
	breaksw
    case -[A-Z0-9]*:
	set sig = "$argv[1]"
	breaksw
    default:
	goto usage
    endsw
    shift
end

set badkill = 0

foreach pname ($argv)
    set exp = "[0-9]:[0-9][0-9] [^ ]*${pname}[^a-zA-Z0-9_/-]*"
    set pids = `ps xwa | egrep "$exp" | awk '{print $1}'`
    if ($#pids == 0) then
	if ($?vflag || ! $?qflag) echo No $pname
	@ badkill += 1
    else
	foreach pid ($pids)
	    if ($?vflag) echo kill $pname=$pid $sig
	    if (! $?nflag) then
		# using the built-in kill kills this script if error.
		# using /bin/kill risks a different set of signals.
		if ($?qflag) then
		    /bin/csh -c "kill $sig $pid >& /dev/null"
		else
		    /bin/csh -c "kill $sig $pid"
		endif
		@ badkill += $status
	    endif
	end
    endif
end

if ($badkill) exit 2
exit 0
